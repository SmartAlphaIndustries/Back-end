generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "dark"
  includeRelationFromFields = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum printerStatus {
  IDLE
  PRINTING
  ERROR
  MAITENANCE
  BROKEN
  FIXING
}

enum FilamentType {
  ABS
  PLA
  PETG
  NYLON
  TPU
  ASA
  HIPS
  PVA
  WOOD
  METAL
  CARBON_FIBER
  FLEXIBLE
  GLOW_IN_THE_DARK
  CONDUCTIVE
  MAGNETIC
  FLAME_RETARDANT
  HIGH_IMPACT_POLYSTYRENE
  POLYPROPYLENE
  POLYCARBONATE
  ACRYLONITRILE_STYRENE_ACROLEIN
}

model Client {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

model User {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  username         String               @unique
  password         String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  jiraAccess       JiraAccess?
  acceptances      UserAcceptanceInfo[]
  userPersonalInfo UserPersonalInfo?
  jobs             PrintJob[]

  @@map("users")
}

model UserPersonalInfo {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  email           String   @unique
  names           String
  maternalSurname String?
  paternalSurname String
  phone           String?
  age             Int?
  birthDay        DateTime
  recoveryEmail   String?
  country         String?
  city            String?
  username        String   @unique
  avatar          String?

  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String? @unique @db.ObjectId

  @@map("userPersonalInfo")
}

model UserAcceptanceInfo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  acceptance   Acceptance @relation(fields: [acceptanceId], references: [id])
  acceptanceId String     @db.ObjectId

  accepted Boolean

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("userAcceptanceInfo")
}

model Acceptance {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  title              String
  template           String
  version            String
  userAcceptanceInfo UserAcceptanceInfo[]

  @@map("acceptances")
}

model Printer {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  model     String
  location  String
  status    printerStatus @default(IDLE)
  jobs      PrintJob[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  warranty  String

  @@map("printers")
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model Artist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("artists")
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model RemotePrinterOperator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("remotePrinterOperators")
}

model Material {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  type       String
  color      String
  PrintJob   PrintJob? @relation(fields: [printJobId], references: [id])
  printJobId String?   @db.ObjectId

  @@map("materials")
}

model Audience {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  group     String[] @db.ObjectId

  @@map("audiences")
}

model PrintJob {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  printerId String     @db.ObjectId
  filename  String
  userId    String     @db.ObjectId
  startTime DateTime
  endTime   DateTime
  status    String
  materials Material[]
  user      User       @relation(fields: [userId], references: [id])
  printer   Printer    @relation(fields: [printerId], references: [id])

  @@map("printJobs")
}

model JiraAccess {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  atllassian_username String
  atllassian_api_key  String
  lead_acct_id        String
  domain              String

  jiraProject JiraProject?
  user        User?        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId      String?      @unique @db.ObjectId

  @@map("jiraAccess")
}

model JiraProject {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  project_key  String
  project_name String

  jiraAccess   JiraAccess? @relation(fields: [jiraAccessId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  jiraAccessId String?     @unique @db.ObjectId

  @@map("jiraProject")
}
